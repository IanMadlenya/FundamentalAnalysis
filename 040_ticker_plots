#!/usr/bin/env python2

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import matplotlib.ticker as mticker
import pandas as pd

import modules.config_details as conf_info

dates_formatter = '%Y-%m-%d'
dateparse = lambda x: pd.datetime.strptime(x, dates_formatter)

def load_df(path, ticker, date_field):
  if (False == isinstance(path, basestring)):
    dfs = []
    for curr_path in path:
      file_path = curr_path + ticker.upper() + '.csv'
      curr_df = pd.read_csv(file_path, parse_dates=[date_field], date_parser=dateparse)
      dfs.append(curr_df)
    merged_df = pd.concat(dfs)
    return merged_df
  else:
    file_path = path + ticker.upper() + '.csv'
    df = pd.read_csv(file_path, parse_dates=[date_field], date_parser=dateparse)
    return df;

def build_plot(cur_dict, ticker, num_rows_num_cols_tuple, shared_axis):
  current_df = load_df(cur_dict['path_prefixes'], ticker, cur_dict['date_field_name'])
  ax = plt.subplot2grid(num_rows_num_cols_tuple, (cur_dict['row_position'], 0), rowspan=cur_dict['rowspan'])
  if (shared_axis):
    ax = plt.subplot2grid(num_rows_num_cols_tuple, (cur_dict['row_position'], 0), rowspan=cur_dict['rowspan'], sharex=shared_axis)
    # print 'Shared axis!'
  ax.plot(current_df[cur_dict['date_field_name']],current_df[cur_dict['value_field_name']])
  ax.grid(True)
  ax.yaxis.set_major_locator(mticker.MaxNLocator(nbins='5', prune='upper'))
  plt.ylabel(cur_dict['y_label'], rotation=0)
  # ax.text(0,0, cur_dict['y_label'], va='top', transform=ax.transAxes)
  
  return ax


eps_dict = {
  'path_prefixes'    : './data/calculated_ratios/eps_', 
  'date_field_name'  : 'Date', 
  'value_field_name' : 'EPS', 
  'y_label'          : 'EPS', 
  'row_position'     : 0, 
  'rowspan'          : 1
}
peg_dict = {
  'path_prefixes'    : './data/calculated_ratios/peg_', 
  'date_field_name'  : 'Date', 
  'value_field_name' : 'PEG', 
  'y_label'          : 'PEG', 
  'row_position'     : 1, 
  'rowspan'          : 1
}
pe_median_dict = {
  'path_prefixes'    : './data/calculated_ratios/pe_median_', 
  'date_field_name'  : 'Date', 
  'value_field_name' : 'PE_median', 
  'y_label'          : 'P/E', 
  'row_position'     : 2, 
  'rowspan'          : 1
}
outstanding_shares_dict = {
  'path_prefixes'    : conf_info.fundamentals_dir + 'outstanding_shares_RAYMOND_', 
  'date_field_name'  : 'Date', 
  'value_field_name' : 'Value', 
  'y_label'          : 'Outstanding \n shares', 
  'row_position'     : 3, 
  'rowspan'          : 1
}
closing_price_dict = {
  'path_prefixes'    : [conf_info.stock_prices_dir + conf_info.stock_prices_ticker_pre_filename_prefix, conf_info.stock_prices_dir + conf_info.stock_prices_ticker_post_filename_prefix], 
  'date_field_name'  : 'Date', 
  'value_field_name' : 'Adj Close', 
  'y_label'          : 'Stock \n closing price', 
  'row_position'     : 4, 
  'rowspan'          : 3
}

series_dicts = {
  'eps_data': eps_dict,
  'peg_data': peg_dict,
  'pe_median_data': pe_median_dict,
  'outstanding_shares_data': outstanding_shares_dict,
  'closing_price_data': closing_price_dict
}

def get_total_graph_rows(dictionaries):
  available_series = dictionaries.keys()
  rows_each = map(lambda curr_series: dictionaries[curr_series]['rowspan'], available_series)
  return reduce(lambda x, y: x+y, rows_each)

def get_plt(dicts, ticker):
  total_rows = get_total_graph_rows(dicts)
  num_rows_num_cols_tuple = (total_rows,1)
  plt.suptitle(ticker + ' ticker')  
  ax_eps                = build_plot(dicts['eps_data'],                ticker, num_rows_num_cols_tuple, None)
  ax_peg                = build_plot(dicts['peg_data'],                ticker, num_rows_num_cols_tuple, ax_eps)
  ax_pe_median          = build_plot(dicts['pe_median_data'],          ticker, num_rows_num_cols_tuple, ax_eps)
  ax_outstanding_shares = build_plot(dicts['outstanding_shares_data'], ticker, num_rows_num_cols_tuple, ax_eps)
  ax_closing_price      = build_plot(dicts['closing_price_data'],      ticker, num_rows_num_cols_tuple, ax_eps)

  plt.xlabel('Date')
  plt.xticks(rotation=45)
  plt.setp(ax_eps.get_xticklabels(), visible=False)
  plt.setp(ax_pe_median.get_xticklabels(), visible=False)
  plt.setp(ax_peg.get_xticklabels(), visible=False)
  plt.setp(ax_outstanding_shares.get_xticklabels(), visible=False)
  plt.subplots_adjust(left=.16,right=.96,top=.94,bottom=.16,hspace=0)

  ticker_fig = plt.gcf() # for "get current figure"
  ticker_fig.savefig('./graphs/'+ticker+'.png', dpi=300, format='png')
  return plt


tickers_clothes = [ 'NKE', 'UA', 'ADDYY', 'ADS', 'LULU' ]
tickers_air = [ 'EZJ', 'RYAAY' ] # Ryanair RYA:LN, RYAAY:US, RYAOF over the counter
tickers_social = [ 'NFLX', 'FB', 'TWTR', 'ETSY', 'LNKD' ]
tickers_factory = [ 'TSLA', 'IMG', 'IFX', 'SIE' ]
tickers_online_retail = [ 'AMZN', 'EBAY', 'EBA', 'BABA' ]
tickers_pay = [ 'PYPL', '2PP', 'SQ' ]
tickers_it = [ 'GOOG', 'GOOGL', 'AAPL', 'TEAM', 'GDDY' ]
tickers_health = [ 'FIT' ]

# WalMart, Coca-Cola, Genpact, Visa, Boeing, Ford, Goldman Sachs
tickers_solid=[ 'WMT', 'KO', 'G', 'V', 'BOE', 'F', 'GS' ]


def merge_lists():
  # all_tickers = list(set(tickers_clothes)|set(tickers_air)|set(tickers_social)|set(tickers_factory)|set(tickers_online_retail)|set(tickers_pay)|set(tickers_it)|set(tickers_health))
  all_tickers = tickers_solid
  return all_tickers

def store_plot(dicts, ticker):
  ticker_plt = get_plt(dicts, ticker)
  # ticker_plt.show()
  ticker_plt.cla() # clears the current axes if you have multiple subplots in the same figure
  ticker_plt.clf() # clear figure

def store_plots(dicts, tickers):
  for ticker in tickers:
    try:
      print 'Processing ticker:', ticker
      store_plot(dicts, ticker)
    except Exception, e:
      print 'Failed to process ticker: ' + ticker + ' ~~~', str(e)

store_plots(series_dicts, merge_lists())
